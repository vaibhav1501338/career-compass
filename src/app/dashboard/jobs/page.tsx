
"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { generateJobListings, type GenerateJobListingsOutput } from "@/ai/flows/generate-job-listings";
import { Loader2, Search, Briefcase, MapPin, Building, ArrowRight } from "lucide-react";
import Link from "next/link";

const formSchema = z.object({
  query: z.string().min(2, "Please enter a search query."),
});

type Job = GenerateJobListingsOutput["jobs"][0];

export default function JobSearchPage() {
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<GenerateJobListingsOutput | null>(null);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: { query: "" },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setLoading(true);
    setResult(null);
    try {
      const response = await generateJobListings(values);
      setResult(response);
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to generate job listings. Please try again.",
      });
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="space-y-8">
      <div>
        <h1 className="font-headline text-3xl font-bold tracking-tight md:text-4xl">
          AI Job Search
        </h1>
        <p className="mt-2 text-lg text-muted-foreground">
          Explore sample job opportunities generated by AI.
        </p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="font-headline">Find Your Next Role</CardTitle>
          <CardDescription>
            Enter a job title or keywords to generate a list of sample job postings.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="flex items-end gap-4">
              <FormField
                control={form.control}
                name="query"
                render={({ field }) => (
                  <FormItem className="flex-grow">
                    <FormLabel>Job Title or Keyword</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="e.g., 'React Developer', 'Marketing Manager'"
                        {...field}
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
              <Button type="submit" disabled={loading}>
                {loading ? (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <Search className="mr-2 h-4 w-4" />
                )}
                Search
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>
      
      {loading && (
        <div className="flex flex-col items-center justify-center pt-20 gap-4 text-center">
            <Loader2 className="h-12 w-12 animate-spin text-primary" />
            <h2 className="text-xl font-semibold text-muted-foreground">Searching for jobs...</h2>
            <p className="text-muted-foreground">The AI is generating sample opportunities for you.</p>
        </div>
      )}

      {result && result.jobs.length > 0 && !loading && (
        <div className="space-y-4">
            <h2 className="text-2xl font-bold font-headline">Sample Job Listings</h2>
            {result.jobs.map((job, index) => (
                 <Card key={index} className="transition-all duration-300 hover:shadow-xl hover:-translate-y-1">
                     <CardHeader>
                        <CardTitle className="font-headline flex items-center gap-2">
                           <Briefcase className="h-5 w-5 text-primary" /> {job.title}
                        </CardTitle>
                        <div className="flex flex-wrap items-center gap-x-4 gap-y-1 text-sm text-muted-foreground pt-2">
                            <div className="flex items-center gap-2">
                                <Building className="h-4 w-4" />
                                {job.company}
                            </div>
                            <div className="flex items-center gap-2">
                                <MapPin className="h-4 w-4" />
                                {job.location}
                            </div>
                        </div>
                     </CardHeader>
                     <CardContent>
                        <p className="text-muted-foreground mb-4">{job.description}</p>
                        <Button asChild variant="link" className="-ml-4 group">
                           <Link href={job.url}>
                                View Details <ArrowRight className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1" />
                           </Link>
                        </Button>
                     </CardContent>
                 </Card>
            ))}
        </div>
      )}
    </div>
  );
}
